// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")  // Referencing the environment variable
}

enum MemberRole {
  ADMIN
  TEACHER
  STUDENT
}

model Profile {
  id String @id @default(uuid()) @map("_id")
  userId String @unique 
  name String
  imageUrl String?  
  email String  
  user User @relation(fields: [userId], references: [id]) // Relation defined here
  dob DateTime
  occupation String
  bio String?
 // purchases Purchase[]
  certificatesEarned Int @default(0)

  gender String?
  country String?
  contactNo String?
  address String?
  highestQualification String?
  employeeStatus String?
  industry String?
  paymentOption String?

  //answers Answer[] // Relation to Answer
  //quizAttempts QuizAttempt[] // a relation to QuizAttempt

  role MemberRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


 
model Course{
  id String @id @default(uuid()) @map("_id")
  userId String
  title String  
  description String?  
  imageUrl    String?
  price       Float?
  isPublished Boolean @default(false) 
  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  name String?

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]
  projectsubmission ProjectSubmission[]

  quizzes Quiz[] // Add this line
  chapterQuizzes ChapterQuiz[]

  transactions Transaction[]

  mode CourseMode @default(ONDEMAND)
  instructors InstructorAssignment[]
  liveSessions LiveSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}




model Category{
  id String @id @default(uuid()) @map("_id")
  name String
  description String?

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Attachment{
  id String @id @default(uuid()) @map("_id")
  name String
  url String 
 
  courseId String
  Course Course @relation(fields: [courseId], references: [id], onDelete:Cascade)

  chapterId String?
  //Chapter Chapter @relation(fields: [chapterId], references: [id], onDelete:Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
   @@index([courseId])

   }


  model ChapterAttachment{
  id String @id @default(uuid()) @map("_id")
  name String
  url String 
 
  chapterId String
  Chapter Chapter @relation(fields: [chapterId], references: [id], onDelete:Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
   @@index([chapterId])

   }




model Recording {
  id        String   @id @default(uuid()) @map("_id")
  title     String   // Title of the recording
  url       String   // URL or link to the recording
  duration  Int?     // Duration in minutes (optional)
  uploadedAt DateTime @default(now()) // When the recording was uploaded
  isActive  Boolean  @default(true)   // Whether the recording is active

  courseId  String?

  chapterId String   // Foreign key to link to Chapter
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId]) // Index for faster queries by chapter
}   


model Chapter{
  id String @id @default(uuid()) @map("_id")
  title String
  userId String
  description String?  
  videoUrl String? 
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  muxData muxData?
  chapterattachments ChapterAttachment[]

  googleDriveUrl String? // New field for Google Drive URLs


  recordings Recording[] // New relation to the Recording model


  courseId String
  Course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  quizzes      Quiz[]       // Add this line to establish a reverse relation to Quiz

  chapterquizzes   ChapterQuiz[] // This defines the reverse relation to ChapterQuiz
  



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

@@index([courseId])
}


model  muxData {
  id String @id @default(uuid()) @map("_id")
  assetId String
  playbackId String
   
  chapterId String  @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete:Cascade)          
}
 


model UserProgress{
  id String @id @default(uuid()) @map("_id")
  userId String

  courseId  String?

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete:Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Add this line
  score      Int     @default(0) // Add the score field here



  isCompleted Boolean @default(false)
  level Int @default(1) // Track user level
  points Int @default(0) // Track points earned

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId,chapterId])
}


model Purchase{
  id String @id @default(uuid()) @map("_id")
  userId String
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  

  user     User    @relation(fields: [userId], references: [id])
  transactionId String?  //  transactionId to the model
  transaction   Transaction? @relation(fields: [transactionId], references: [id]) // Add this line


  //profile Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  @@unique([userId,courseId])
  @@index([courseId])
}



model StripeCustomer {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @unique
  stripeCustomerId String     @unique

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}


model DPOCustomer {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique
  dpoCustomerId String     @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}





model Logging {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  method    String
  userId    String // Add this line
  body      String?
  response  String?
  statusCode Int?
  errorMessage String?
  createdAt DateTime @default(now())
}






 

 


model Quiz {
  id        String     @id @default(uuid()) @map("_id")
  title     String
  courseId  String
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[] // Relation to Question model

  chapterId String?   // Make chapterId optional if not all quizzes are tied to a chapter
  chapter   Chapter?  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  position Int


  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

 // results   QuizResult[] @relation("QuizResults") 
}

model Question {
  id            String   @id @default(uuid()) @map("_id")
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionText  String   
  options       Option[] @relation("QuestionOptions") // Relation to options
  correctAnswer String   // Correct answer
 
}

model Option {
  id         String   @id @default(uuid()) @map("_id")
  text       String   // Option text
   
  question   Question @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
}




model QuizAttempt {
  id           String    @id @default(uuid()) @map("_id")
  quizId        String
  studentId     String?
  student       User?     @relation(fields: [studentId], references: [id])

  score         Int
  totalQuestions Int
  answers       String   // Storing answers as JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Add relation if necessary
 // quiz           Quiz     @relation(fields: [quizId], references: [id])

}





model QuizResult {
  id           String   @id @default(uuid()) @map("_id")
  quizId       String
  studentId    String
  score        Int
  total        Int
  createdAt    DateTime @default(now())

  //quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}


// model Answer {
//   id String @id @default(uuid()) @map("_id")
//   text String
//   isCorrect Boolean

//   questionId String
//   question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }


model SupportQuery {
  id         String   @id @default(uuid()) @map("_id")
  studentId  String
  email      String
  subject    String
  message    String
  createdAt  DateTime @default(now())
 }


model Message {
  id        String    @id @default(uuid()) @map("_id")
  userId    String   // The ID of the student or teacher
  userType  String   // "student" or "teacher"
  content   String
  userName  String?
  fileUrl   String?  // Add this
  fileType  String?  // Add this
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



 
model Learner {
  id                       String   @id @default(uuid()) @map("_id")
  name                     String
  imageUrl                 String?  // Optional field for profile images
  statistics               Float
  lessonStatus             String
  quizScore                String
  assignmentStatus         String
  webinarStatus            String
  feedbackAssignmentStatus String
  feedbackWebinarStatus    String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}




 model ChapterQuiz {
  id        String         @id @default(uuid()) @map("_id") // MongoDB ID mapping
  title     String
  courseId  String
  course    Course         @relation(fields: [courseId], references: [id])
  chapterId String          @unique
  chapter   Chapter        @relation(fields: [chapterId], references: [id])
  questions ChapterQuestion[] // Relation to ChapterQuestion
  attempts  ChapterQuizAttempt[] // Added back reference for relation
  results   ChapterQuizResult[] // Added back reference for relation

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([courseId, chapterId]) // Composite unique constraint
}

model ChapterQuestion {
  id            String       @id @default(uuid()) @map("_id") // MongoDB ID mapping
  chapterQuizId String
  chapterQuiz   ChapterQuiz @relation(fields: [chapterQuizId], references: [id], onDelete: Cascade)
  questionText  String   
  //options       Option[] @relation("QuestionOptions") // Relation to options
  correctAnswer String   // Correct answer
  chapterOptions ChapterOption[] // Relation to ChapterOption

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ChapterOption {
  id              String         @id @default(uuid()) @map("_id") // MongoDB ID mapping
  chapterQuestionId String
  text       String

  chapterQuestion ChapterQuestion @relation(fields: [chapterQuestionId], references: [id], onDelete: Cascade)
  optionId         String         @default(uuid())                // Ensure a default value for optionId
  //option          Option         @relation(fields: [optionId], references: [id], onDelete: Cascade)
  isCorrect       Boolean        // Flag indicating if this option is the correct one

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

 

model ChapterQuizAttempt {
  id           String           @id @default(uuid()) @map("_id") // MongoDB ID mapping
  chapterQuizId String
  studentId    String

  score         Int
  chapterId     String
  totalQuestions Int
  answers       String   // Storing answers as JSON string
  chapterQuiz  ChapterQuiz      @relation(fields: [chapterQuizId], references: [id], onDelete: Cascade)
  student      User             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt  
}


 

model ChapterQuizResult {
  id           String           @id @default(uuid()) @map("_id") // MongoDB ID mapping
  chapterQuizId String
  score        Int
  total        Int
  studentId    String
  chapterQuiz  ChapterQuiz      @relation(fields: [chapterQuizId], references: [id], onDelete: Cascade)
  student      User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

 


model User {
  id           String       @id @default(uuid()) @map("_id")
  name         String
  email        String       @unique
  quizAttempts QuizAttempt[] // Relation back to QuizAttempt
  chapterQuizAttempts ChapterQuizAttempt[]
  chapterQuizResults  ChapterQuizResult[]
  purchases    Purchase[]    // Ensure this relation exists
  points       Int            @default(0)
  level        Int            @default(1)  // Default level is 1
  userProgress UserProgress[] // Add this line to establish the relation
  number String? // Optional field for phone number
  transactions Transaction[]
  projectsubmission ProjectSubmission[]

  courseId  String?

  profile  Profile? @relation             // Relation defined without `fields` or `references`

  instructorAssignments InstructorAssignment[] @relation
   
}


model Transaction {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  courseId  String
  chapterId String?
  amount    Int
  dpoToken String? @unique
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  purchases Purchase[] // Add this line to define the reverse relation


  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
}




 
model ProjectSubmission {
  id          String   @id @default(uuid()) @map("_id")
  userId      String
  courseId    String
  fileName    String
  fileUrl     String
  submittedAt DateTime @default(now())
  marks       Int?     // Add marks field (nullable until marked)
  comments    String?  // Optional feedback
  isMarked    Boolean  @default(false) // Add isMarked field

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([courseId])
}





model PendingTransaction {
  id          String   @id @default(uuid()) @map("_id")
  dpoToken    String   @unique
  courseId    String
  chapterId   String
  amount      Float
  serviceType Int
  status      String   @default("PENDING") // 👈  
  transId     String?  // 👈  
 // userId      String 
  createdAt   DateTime @default(now())
}




enum CourseMode {
  LIVE
  HYBRID
  ONDEMAND
}

model InstructorAssignment {
  id String @id @default(uuid()) @map("_id")
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  
  @@unique([courseId, userId])
  @@index([courseId])
  @@index([userId])
}


model LiveSession {
  id String @id @default(uuid()) @map("_id")
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title String
  startTime DateTime
  endTime DateTime
  meetingUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([courseId])
}